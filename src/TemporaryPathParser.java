import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class TemporaryPathParser {
	public static void main(String[] args) {
		String pathString = "350.0,350.0; 350.0,346.0; 350.0,342.0; 350.0,338.0; 350.0,334.0; 350.0,330.0; 350.0,326.0; 350.0,322.0; 350.0,318.0; 350.0,314.0; 350.0,310.0; 350.0,306.0; 350.0,302.0; 350.0,298.0; 350.0,294.0; 350.0,290.0; 350.0,286.0; 350.0,282.0; 350.0,278.0; 350.0,274.0; 350.0,270.0; 350.0,266.0; 350.0,262.0; 350.0,258.0; 350.0,254.0; 350.0,250.0; 350.0,246.0; 350.0,242.0; 350.0,238.0; 350.0,234.0; 350.0,230.0; 350.0,226.0; 350.0,222.0; 350.0,218.0; 350.0,214.0; 350.0,210.0; 350.0,206.0; 350.0,202.0; 350.0,198.0; 350.0,194.0; 350.0,190.0; 350.0,186.0; 350.0,182.0; 350.0,178.0; 350.0,174.0; 350.0,170.0; 350.0,166.0; 350.0,162.0; 350.0,158.0; 350.0,154.0; 350.0,150.0; 350.0,146.0; 350.0,142.0; 350.0,138.0; 350.0,134.0; 350.0,130.0; 350.0,126.0; 350.0,122.0; 350.0,118.0; 350.0,114.0; 350.0,110.0; 350.0,106.0; 350.0,102.0; 350.0,100.0; 354.0,100.0; 358.0,100.0; 362.0,100.0; 366.0,100.0; 370.0,100.0; 374.0,100.0; 378.0,100.0; 382.0,100.0; 386.0,100.0; 390.0,100.0; 394.0,100.0; 398.0,100.0; 402.0,100.0; 406.0,100.0; 410.0,100.0; 414.0,100.0; 418.0,100.0; 422.0,100.0; 426.0,100.0; 430.0,100.0; 434.0,100.0; 438.0,100.0; 442.0,100.0; 446.0,100.0; 450.0,100.0; 454.0,100.0; 458.0,100.0; 462.0,100.0; 466.0,100.0; 470.0,100.0; 474.0,100.0; 478.0,100.0; 482.0,100.0; 486.0,100.0; 490.0,100.0; 494.0,100.0; 498.0,100.0; 502.0,100.0; 506.0,100.0; 510.0,100.0; 514.0,100.0; 518.0,100.0; 522.0,100.0; 526.0,100.0; 530.0,100.0; 534.0,100.0; 538.0,100.0; 542.0,100.0; 546.0,100.0; 550.0,100.0; 554.0,100.0; 558.0,100.0; 562.0,100.0; 566.0,100.0; 570.0,100.0; 574.0,100.0; 578.0,100.0; 582.0,100.0; 586.0,100.0; 590.0,100.0; 594.0,100.0; 598.0,100.0; 600.0,100.0; 600.0,103.0; 600.0,107.0; 600.0,111.0; 600.0,115.0; 600.0,119.0; 600.0,123.0; 600.0,127.0; 600.0,131.0; 600.0,135.0; 600.0,139.0; 600.0,143.0; 600.0,147.0; 600.0,151.0; 600.0,155.0; 600.0,159.0; 600.0,163.0; 600.0,167.0; 600.0,171.0; 600.0,175.0; 600.0,179.0; 600.0,183.0; 600.0,187.0; 600.0,191.0; 600.0,195.0; 600.0,199.0; 600.0,203.0; 600.0,207.0; 600.0,211.0; 600.0,215.0; 600.0,219.0; 600.0,223.0; 600.0,227.0; 600.0,231.0; 600.0,235.0; 600.0,239.0; 600.0,243.0; 600.0,247.0; 600.0,251.0; 600.0,255.0; 600.0,259.0; 600.0,263.0; 600.0,267.0; 600.0,271.0; 600.0,275.0; 600.0,279.0; 600.0,283.0; 600.0,287.0; 600.0,291.0; 600.0,295.0; 600.0,299.0; 600.0,303.0; 600.0,307.0; 600.0,311.0; 600.0,315.0; 600.0,319.0; 600.0,323.0; 600.0,327.0; 600.0,331.0; 600.0,335.0; 600.0,339.0; 600.0,343.0; 600.0,347.0; 600.0,351.0; 600.0,355.0; 600.0,359.0; 600.0,363.0; 600.0,367.0; 600.0,371.0; 600.0,375.0; 600.0,379.0; 600.0,383.0; 600.0,387.0; 600.0,391.0; 600.0,395.0; 600.0,399.0; 600.0,403.0; 600.0,407.0; 600.0,411.0; 600.0,415.0; 600.0,419.0; 600.0,423.0; 600.0,427.0; 600.0,431.0; 600.0,435.0; 600.0,439.0; 600.0,443.0; 600.0,447.0; 600.0,451.0; 600.0,455.0; 600.0,459.0; 600.0,463.0; 600.0,467.0; 600.0,471.0; 600.0,475.0; 600.0,479.0; 600.0,483.0; 600.0,487.0; 600.0,491.0; 600.0,495.0; 600.0,499.0; 600.0,503.0; 600.0,507.0; 600.0,511.0; 600.0,515.0; 600.0,519.0; 600.0,523.0; 600.0,527.0; 600.0,531.0; 600.0,535.0; 600.0,539.0; 600.0,543.0; 600.0,547.0; 600.0,551.0; 600.0,555.0; 600.0,559.0; 600.0,563.0; 600.0,567.0; 600.0,571.0; 600.0,575.0; 600.0,579.0; 600.0,583.0; 600.0,587.0; 600.0,591.0; 600.0,595.0; 600.0,599.0; 600.0,600.0; 596.0,600.0; 592.0,600.0; 588.0,600.0; 584.0,600.0; 580.0,600.0; 576.0,600.0; 572.0,600.0; 568.0,600.0; 564.0,600.0; 560.0,600.0; 556.0,600.0; 552.0,600.0; 548.0,600.0; 544.0,600.0; 540.0,600.0; 536.0,600.0; 532.0,600.0; 528.0,600.0; 524.0,600.0; 520.0,600.0; 516.0,600.0; 512.0,600.0; 508.0,600.0; 504.0,600.0; 500.0,600.0; 496.0,600.0; 492.0,600.0; 488.0,600.0; 484.0,600.0; 480.0,600.0; 476.0,600.0; 472.0,600.0; 468.0,600.0; 464.0,600.0; 460.0,600.0; 456.0,600.0; 452.0,600.0; 448.0,600.0; 444.0,600.0; 440.0,600.0; 436.0,600.0; 432.0,600.0; 428.0,600.0; 424.0,600.0; 420.0,600.0; 416.0,600.0; 412.0,600.0; 408.0,600.0; 404.0,600.0; 400.0,600.0; 396.0,600.0; 392.0,600.0; 388.0,600.0; 384.0,600.0; 380.0,600.0; 376.0,600.0; 372.0,600.0; 368.0,600.0; 364.0,600.0; 360.0,600.0; 356.0,600.0; 352.0,600.0; 348.0,600.0; 344.0,600.0; 340.0,600.0; 336.0,600.0; 332.0,600.0; 328.0,600.0; 324.0,600.0; 320.0,600.0; 316.0,600.0; 312.0,600.0; 308.0,600.0; 304.0,600.0; 300.0,600.0; 296.0,600.0; 292.0,600.0; 288.0,600.0; 284.0,600.0; 280.0,600.0; 276.0,600.0; 272.0,600.0; 268.0,600.0; 264.0,600.0; 260.0,600.0; 256.0,600.0; 252.0,600.0; 248.0,600.0; 244.0,600.0; 240.0,600.0; 236.0,600.0; 232.0,600.0; 228.0,600.0; 224.0,600.0; 220.0,600.0; 216.0,600.0; 212.0,600.0; 208.0,600.0; 204.0,600.0; 200.0,600.0; 196.0,600.0; 192.0,600.0; 188.0,600.0; 184.0,600.0; 180.0,600.0; 176.0,600.0; 172.0,600.0; 168.0,600.0; 164.0,600.0; 160.0,600.0; 156.0,600.0; 152.0,600.0; 148.0,600.0; 144.0,600.0; 140.0,600.0; 136.0,600.0; 132.0,600.0; 128.0,600.0; 124.0,600.0; 120.0,600.0; 116.0,600.0; 112.0,600.0; 108.0,600.0; 104.0,600.0; 100.0,600.0; 100.0,600.0; 100.0,596.0; 100.0,592.0; 100.0,588.0; 100.0,584.0; 100.0,580.0; 100.0,576.0; 100.0,572.0; 100.0,568.0; 100.0,564.0; 100.0,560.0; 100.0,556.0; 100.0,552.0; 100.0,548.0; 100.0,544.0; 100.0,540.0; 100.0,536.0; 100.0,532.0; 100.0,528.0; 100.0,524.0; 100.0,520.0; 100.0,516.0; 100.0,512.0; 100.0,508.0; 100.0,504.0; 100.0,500.0; 100.0,496.0; 100.0,492.0; 100.0,488.0; 100.0,484.0; 100.0,480.0; 100.0,476.0; 100.0,472.0; 100.0,468.0; 100.0,464.0; 100.0,460.0; 100.0,456.0; 100.0,452.0; 100.0,448.0; 100.0,444.0; 100.0,440.0; 100.0,436.0; 100.0,432.0; 100.0,428.0; 100.0,424.0; 100.0,420.0; 100.0,416.0; 100.0,412.0; 100.0,408.0; 100.0,404.0; 100.0,400.0; 100.0,396.0; 100.0,392.0; 100.0,388.0; 100.0,384.0; 100.0,380.0; 100.0,376.0; 100.0,372.0; 100.0,368.0; 100.0,364.0; 100.0,360.0; 100.0,356.0; 100.0,352.0; 100.0,348.0; 100.0,344.0; 100.0,340.0; 100.0,336.0; 100.0,332.0; 100.0,328.0; 100.0,324.0; 100.0,320.0; 100.0,316.0; 100.0,312.0; 100.0,308.0; 100.0,304.0; 100.0,300.0; 100.0,296.0; 100.0,292.0; 100.0,288.0; 100.0,284.0; 100.0,280.0; 100.0,276.0; 100.0,272.0; 100.0,268.0; 100.0,264.0; 100.0,260.0; 100.0,256.0; 100.0,252.0; 100.0,248.0; 100.0,244.0; 100.0,240.0; 100.0,236.0; 100.0,232.0; 100.0,228.0; 100.0,224.0; 100.0,220.0; 100.0,216.0; 100.0,212.0; 100.0,208.0; 100.0,204.0; 100.0,200.0; 100.0,196.0; 100.0,192.0; 100.0,188.0; 100.0,184.0; 100.0,180.0; 100.0,176.0; 100.0,172.0; 100.0,168.0; 100.0,164.0; 100.0,160.0; 100.0,156.0; 100.0,152.0; 100.0,148.0; 100.0,144.0; 100.0,140.0; 100.0,136.0; 100.0,132.0; 100.0,128.0; 100.0,124.0; 100.0,120.0; 100.0,116.0; 100.0,112.0; 100.0,108.0; 100.0,104.0; 100.0,100.0; 100.0,100.0; 102.0,102.0; 105.0,105.0; 108.0,108.0; 111.0,111.0; 114.0,114.0; 116.0,116.0; 119.0,119.0; 122.0,122.0; 125.0,125.0; 128.0,128.0; 131.0,131.0; 133.0,133.0; 136.0,136.0; 139.0,139.0; 142.0,142.0; 145.0,145.0; 148.0,148.0; 150.0,150.0; 153.0,153.0; 156.0,156.0; 159.0,159.0; 162.0,162.0; 165.0,165.0; 167.0,167.0; 170.0,170.0; 173.0,173.0; 176.0,176.0; 179.0,179.0; 182.0,182.0; 184.0,184.0; 187.0,187.0; 190.0,190.0; 193.0,193.0; 196.0,196.0; 198.0,198.0; 201.0,201.0; 204.0,204.0; 207.0,207.0; 210.0,210.0; 213.0,213.0; 215.0,215.0; 218.0,218.0; 221.0,221.0; 224.0,224.0; 227.0,227.0; 230.0,230.0; 232.0,232.0; 235.0,235.0; 238.0,238.0; 241.0,241.0; 244.0,244.0; 247.0,247.0; 249.0,249.0; 252.0,252.0; 255.0,255.0; 258.0,258.0; 261.0,261.0; 264.0,264.0; 266.0,266.0; 269.0,269.0; 272.0,272.0; 275.0,275.0; 278.0,278.0; 281.0,281.0; 283.0,283.0; 286.0,286.0; 289.0,289.0; 292.0,292.0; 295.0,295.0; 297.0,297.0; 300.0,300.0; 303.0,303.0; 306.0,306.0; 309.0,309.0; 312.0,312.0; 314.0,314.0; 317.0,317.0; 320.0,320.0; 323.0,323.0; 326.0,326.0; 329.0,329.0; 331.0,331.0; 334.0,334.0; 337.0,337.0; 340.0,340.0; 343.0,343.0; 346.0,346.0; 348.0,348.0; 350.0,350.0;";
		ArrayList<Pose> path = parsePath(pathString);
		
		for (Pose p : path) {
			System.out.println("(" + p.getX() + ", "  + p.getY() + ", " + p.getHeading() + ")");
		}
	}
	
	public static ArrayList<Pose> parsePath(String pathString) {
        List<String> split = Arrays.asList(pathString.split("; "));
        ArrayList<Pose> path = new ArrayList<>();
        for (int i=0; i<split.size(); i++) {
        	String[] point = split.get(i).split(",");
        	
        	double x = Double.parseDouble(point[0].replaceAll(";", ""));
        	double y = Double.parseDouble(point[1].replaceAll(";", ""));
        	path.add(new Pose(x, y, 0.0, false));
        }

        return path;
    }
}
